import os
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from google.oauth2.service_account import Credentials
from aiohttp import web
import logging

# --- Google Sheets –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'credentials.json'  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)

SPREADSHEET_ID = '1hIxfnL-HlJ097v2zFWhvfsFN-eJ4-tCNwONh8t-HNAA'
SHEET_NAME = '–õ–∏—Å—Ç1'
worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# --- Telegram Bot ---
API_TOKEN = os.environ.get('API_TOKEN')  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ú–µ–Ω—é ---
menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add("üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∏—Ç–µ–ª—é", "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏")

class SearchStates(StatesGroup):
    waiting_for_applicant = State()
    waiting_for_number = State()

def format_request(row):
    return (
        f"–ó–∞—è–≤–∫–∞\n"
        f"–æ—Ç {row[0]}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {row[1]}\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: {row[2]}\n"
        f"–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏: {row[3]}\n"
        f"–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {row[4]}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row[5]}\n"
        f"–°—Ç–∞—Ç—É—Å: {row[6]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {row[8]}\n"
        f"–í–ª–æ–∂–µ–Ω–∏—è: {row[9]}"
    )

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)

@dp.message_handler(lambda m: m.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∏—Ç–µ–ª—é")
async def search_by_applicant(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=menu_keyboard)
    await SearchStates.waiting_for_applicant.set()

@dp.message_handler(lambda m: m.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏")
async def search_by_number(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=menu_keyboard)
    await SearchStates.waiting_for_number.set()

@dp.message_handler(state=SearchStates.waiting_for_applicant, content_types=types.ContentTypes.TEXT)
async def process_search_applicant(message: types.Message, state: FSMContext):
    search_text = message.text.strip().lower()
    rows = worksheet.get_all_values()
    found = False
    for row in rows[1:]:
        if search_text in row[0].lower():
            await message.answer(format_request(row), reply_markup=menu_keyboard)
            found = True
    if not found:
        await message.reply("–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu_keyboard)
    await state.finish()

@dp.message_handler(state=SearchStates.waiting_for_number, content_types=types.ContentTypes.TEXT)
async def process_search_number(message: types.Message, state: FSMContext):
    search_num = message.text.strip()
    rows = worksheet.get_all_values()
    found = False
    for row in rows[1:]:
        if row[1] == search_num:
            await message.answer(format_request(row), reply_markup=menu_keyboard)
            found = True
            break
    if not found:
        await message.reply("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu_keyboard)
    await state.finish()

@dp.message_handler()
async def write_to_sheet(message: types.Message):
    try:
        worksheet.append_row([str(message.from_user.full_name), '', '', '', '', '', '', '', message.text, ''])
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets!", reply_markup=menu_keyboard)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}", reply_markup=menu_keyboard)

# --- Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---

async def on_start(request):
    return web.Response(text="Bot is working")

async def on_get_updates(request):
    # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–¥–µ—Å—å
    return web.Response(status=200)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL
webhook_url = 'https://<your-domain>/webhook'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL

# –ü–æ–¥–∫–ª—é—á–∞–µ–º webhook
app = web.Application()
app.router.add_post('/webhook', on_get_updates)

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    # –°—Ç–∞–≤–∏–º webhook –¥–ª—è Telegram
    bot.set_webhook(webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host='0.0.0.0', port=8080)  # –Ω–∞ –ø–æ—Ä—Ç 8080 (–∏–ª–∏ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω):
    # executor.start_polling(dp, skip_updates=True)
