from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from google.oauth2.service_account import Credentials
import gspread
from aiogram.utils import executor
from aiogram import Bot
from aiogram.dispatcher.filters.state import State, StatesGroup  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# --- Google Sheets –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'credentials.json'  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏!
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)

SPREADSHEET_ID = '1hIxfnL-HlJ097v2zFWhvfsFN-eJ4-tCNwONh8t-HNAA'
SHEET_NAME = '–õ–∏—Å—Ç1'
worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)

# --- Telegram Bot ---
API_TOKEN = os.environ.get('API_TOKEN')
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ú–µ–Ω—é ---
menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add("üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∏—Ç–µ–ª—é", "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏")

class SearchStates(StatesGroup):  # –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç StatesGroup
    waiting_for_applicant = State()
    waiting_for_number = State()

def format_request(row):
    return (
        f"–ó–∞—è–≤–∫–∞\n"
        f"–æ—Ç {row[0]}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {row[1]}\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏: {row[2]}\n"
        f"–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏: {row[3]}\n"
        f"–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {row[4]}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row[5]}\n"
        f"–°—Ç–∞—Ç—É—Å: {row[6]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {row[8]}\n"
        f"–í–ª–æ–∂–µ–Ω–∏—è: {row[9]}"
    )

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)

@dp.message_handler(lambda m: m.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∏—Ç–µ–ª—é")
async def search_by_applicant(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=menu_keyboard)
    await SearchStates.waiting_for_applicant.set()

@dp.message_handler(lambda m: m.text == "üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏")
async def search_by_number(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=menu_keyboard)
    await SearchStates.waiting_for_number.set()

@dp.message_handler(state=SearchStates.waiting_for_applicant, content_types=types.ContentTypes.TEXT)
async def process_search_applicant(message: types.Message, state: FSMContext):
    search_text = message.text.strip().lower()
    rows = worksheet.get_all_values()
    found = False
    for row in rows[1:]:
        if search_text in row[0].lower():
            await message.answer(format_request(row), reply_markup=menu_keyboard)
            found = True
    if not found:
        await message.reply("–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu_keyboard)
    await state.finish()

@dp.message_handler(state=SearchStates.waiting_for_number, content_types=types.ContentTypes.TEXT)
async def process_search_number(message: types.Message, state: FSMContext):
    search_num = message.text.strip()
    rows = worksheet.get_all_values()
    found = False
    for row in rows[1:]:
        if row[1] == search_num:
            await message.answer(format_request(row), reply_markup=menu_keyboard)
            found = True
            break
    if not found:
        await message.reply("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu_keyboard)
    await state.finish()

@dp.message_handler()
async def write_to_sheet(message: types.Message):
    try:
        worksheet.append_row([str(message.from_user.full_name), '', '', '', '', '', '', '', message.text, ''])
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Google Sheets!", reply_markup=menu_keyboard)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}", reply_markup=menu_keyboard)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    from aiohttp import web

    port = int(os.environ.get('PORT', 5000))  # 5000 - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    web.run_app(dp, port=port)
    executor.start_polling(dp, skip_updates=True)
